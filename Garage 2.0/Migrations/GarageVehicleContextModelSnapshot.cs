// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Garage_2._0.Migrations
{
    [DbContext(typeof(GarageVehicleContext))]
    partial class GarageVehicleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Garage_2._0.Models.Member", b =>
                {
                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SocialSecurityNumber");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Garage_2._0.Models.MemberHasMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MembershipId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MembershipId");

                    b.ToTable("MemberHasMembership");
                });

            modelBuilder.Entity("Garage_2._0.Models.Membership", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("BenefitBase")
                        .HasColumnType("float");

                    b.Property<double>("BenefitHourly")
                        .HasColumnType("float");

                    b.HasKey("Type");

                    b.ToTable("Membership");

                    b.HasData(
                        new
                        {
                            Type = "Standard",
                            BenefitBase = 1.0,
                            BenefitHourly = 1.0
                        },
                        new
                        {
                            Type = "Pro",
                            BenefitBase = 0.90000000000000002,
                            BenefitHourly = 0.90000000000000002
                        });
                });

            modelBuilder.Entity("Garage_2._0.Models.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ParkinSpot");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true
                        },
                        new
                        {
                            Id = 2,
                            Available = true
                        },
                        new
                        {
                            Id = 3,
                            Available = true
                        },
                        new
                        {
                            Id = 4,
                            Available = true
                        },
                        new
                        {
                            Id = 5,
                            Available = true
                        },
                        new
                        {
                            Id = 6,
                            Available = true
                        },
                        new
                        {
                            Id = 7,
                            Available = true
                        },
                        new
                        {
                            Id = 8,
                            Available = true
                        },
                        new
                        {
                            Id = 9,
                            Available = true
                        },
                        new
                        {
                            Id = 10,
                            Available = true
                        },
                        new
                        {
                            Id = 11,
                            Available = true
                        },
                        new
                        {
                            Id = 12,
                            Available = true
                        },
                        new
                        {
                            Id = 13,
                            Available = true
                        },
                        new
                        {
                            Id = 14,
                            Available = true
                        },
                        new
                        {
                            Id = 15,
                            Available = true
                        },
                        new
                        {
                            Id = 16,
                            Available = true
                        },
                        new
                        {
                            Id = 17,
                            Available = true
                        },
                        new
                        {
                            Id = 18,
                            Available = true
                        },
                        new
                        {
                            Id = 19,
                            Available = true
                        },
                        new
                        {
                            Id = 20,
                            Available = true
                        },
                        new
                        {
                            Id = 21,
                            Available = true
                        },
                        new
                        {
                            Id = 22,
                            Available = true
                        },
                        new
                        {
                            Id = 23,
                            Available = true
                        },
                        new
                        {
                            Id = 24,
                            Available = true
                        },
                        new
                        {
                            Id = 25,
                            Available = true
                        },
                        new
                        {
                            Id = 26,
                            Available = true
                        },
                        new
                        {
                            Id = 27,
                            Available = true
                        },
                        new
                        {
                            Id = 28,
                            Available = true
                        },
                        new
                        {
                            Id = 29,
                            Available = true
                        },
                        new
                        {
                            Id = 30,
                            Available = true
                        });
                });

            modelBuilder.Entity("Garage_2._0.Models.Vehicle", b =>
                {
                    b.Property<string>("License")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ParkingSpotId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Wheels")
                        .HasColumnType("int");

                    b.HasKey("License");

                    b.HasIndex("MemberId");

                    b.HasIndex("ParkingSpotId")
                        .IsUnique();

                    b.HasIndex("VehicleTypeName");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Garage_2._0.Models.VehicleType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("VehicleType");

                    b.HasData(
                        new
                        {
                            Name = "Car",
                            Description = "The regular everyday vehicle most commonly used by people to travel both short and long distances",
                            Size = 1
                        },
                        new
                        {
                            Name = "Bus",
                            Description = "Bigger type of transportation that takes over 6 people",
                            Size = 1
                        },
                        new
                        {
                            Name = "Motorcycle",
                            Description = "A two wheeled vehicle that makes the owner respected in certain communities",
                            Size = 1
                        },
                        new
                        {
                            Name = "Zeppelin",
                            Description = "An airship in very limited edition",
                            Size = 1
                        },
                        new
                        {
                            Name = "Bananamobile",
                            Description = "Dimitris main way of transport, unmatched by any other vehicle. Aquatic, airborne and an atv all at once!",
                            Size = 1
                        });
                });

            modelBuilder.Entity("Garage_2._0.Models.Member", b =>
                {
                    b.OwnsOne("Garage_2._0.Models.Name", "Name", b1 =>
                        {
                            b1.Property<string>("MemberSocialSecurityNumber")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("MemberSocialSecurityNumber");

                            b1.ToTable("Member");

                            b1.WithOwner()
                                .HasForeignKey("MemberSocialSecurityNumber");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Garage_2._0.Models.MemberHasMembership", b =>
                {
                    b.HasOne("Garage_2._0.Models.Member", "Member")
                        .WithMany("Memberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garage_2._0.Models.Membership", "Membership")
                        .WithMany("HasMembers")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Garage_2._0.Models.Vehicle", b =>
                {
                    b.HasOne("Garage_2._0.Models.Member", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garage_2._0.Models.ParkingSpot", "ParkingSpot")
                        .WithOne("Vehicle")
                        .HasForeignKey("Garage_2._0.Models.Vehicle", "ParkingSpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garage_2._0.Models.VehicleType", "Type")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("ParkingSpot");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Garage_2._0.Models.Member", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Garage_2._0.Models.Membership", b =>
                {
                    b.Navigation("HasMembers");
                });

            modelBuilder.Entity("Garage_2._0.Models.ParkingSpot", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Garage_2._0.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
